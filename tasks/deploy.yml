---

#  - fail: msg="Please define local client_pkg_dir variable"
#    when: client_pkg_dir == ""

- set_fact:
    dist: "{{ dist_folders[ansible_distribution] }}"
    arch: "{{ arch_folders[ansible_architecture] }}"

#- debug: var={{ item }}
#  with_items:
#    - dist
#    - arch

- fail: msg="Couldn't do the '{{ item }}' var"
  when:
    - item is undefined or item == ""
  with_items:
    - dist
    - arch

- set_fact:
    version: "{{ default_versions[dist] }}"
  when: version is undefined or version == ""

- set_fact:
    ver: "{{ versions[dist][version] }}"

- set_fact:
    filenames: []

- set_fact:
    filenames: "{{ filenames }} + [ 'instantclient-{{item}}-{{dist}}.{{arch}}-{{ver.zip_suffix}}.zip' ]"
  with_items: "{{ packages }}"

- debug: var={{ item }}
  with_items:
    - client_pkg_dir
    - filenames
    - ver

- set_fact:
    incl_type: "local"
  when: ansible_host == 'localhost'

- name: Ensure packages are installed
  apt:
    name: [ 'zip', 'unzip', 'gzip', 'libaio1' ]
    state: present
  become: true
  when: dist == "linux"

- set_fact:
    libtype:          "{{ lib_types[dist] }}"
    lib_path:         "{{ lib_paths[dist] }}"
    client_path:      "{{ client_pkg_dir | regex_replace( '/$', '' ) }}/{{ dist }}/{{ arch }}"

- set_fact:
    unzip_path:       "instantclient_{{ ver.lib }}"

- stat: path={{ client_path }}
  connection: local
  register: p


- debug: var={{ item }}
  with_items:
    - unzip_path
    - client_path
    - p
    - incl_type


- fail: msg="client_path does not exist. Make sure client_pkg_dir is set properly."
  when: (p.stat.exists is defined and p.stat.exists|bool == false)

- fail: msg="Path exists and is a directory"
  when: (p.stat.isdir is undefined or p.stat.isdir|bool == false)

- include_tasks: client.{{ incl_type }}.yml
