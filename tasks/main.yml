---

#  - fail: msg="Please define local client_pkg_dir variable"
#    when: client_pkg_dir == ""

- set_fact:
    dist: "{{ dist_folders[ansible_distribution] }}"
    arch: "{{ arch_folders[ansible_architecture] }}"

- debug: var=dist
- debug: var=arch

- fail: msg="Couldn't do the dist var"
  when: not dist is defined or dist == ""

- fail: msg="Couldn't do the arch var"
  when: not arch is defined or arch == ""

- set_fact:
    incl_type: "local"
  when: ansible_host == 'localhost'

- debug: var=incl_type

- name: Ensure packages are installed
  apt:
    name: "{{ item }}"
    state: installed
  become: true
  with_items:
    - zip
    - unzip
    - gzip
    - libaio1
  when: client_pkg_dir != "" and dist == "linux"

- set_fact:
    driver:           "{{ driver_types[dist] }}"
    lib_path:         "{{ lib_paths[dist] }}"
    client_version:   "{{ client_versions[dist] }}"
    lib_version:      "{{ lib_versions[dist] }}"
    file_version:     "{{ file_versions[dist] }}"
    client_base:      "{{ client_pkg_dir | regex_replace( '/$', '' ) }}"

- set_fact:
    client_path:      "{{ client_base }}/{{ dist }}/{{ arch }}"


- set_fact:
    unzip_path:       "instantclient_{{ lib_version }}"

#  - debug: var=client_version
#  - debug: var=lib_version
#  - debug: var=client_path
#  - debug: var=unzip_path

- stat: path={{ client_path }}
  connection: local
  register: p

#  - debug: var=p

- fail: msg="Path does not exist"
  when: client_pkg_dir != "" and (p.stat.exists is defined and p.stat.exists|bool == false)

- fail: msg="Path exists and is a directory"
  when: client_pkg_dir != "" and (not p.stat.isdir is defined or p.stat.isdir|bool == false)

- include: client.{{ incl_type }}.yml


#    nano /tmp/ocicheck.sh
#    chmod a+x /tmp/ocicheck.sh
#    sudo /tmp/ocicheck.sh
