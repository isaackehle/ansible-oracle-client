---

- name: Set local home path
  set_fact:
    local_home: "{{ lookup('env','HOME') }}"

- name: Set local profile
  set_fact:
    profile_path: "{{ local_home }}/.profile"
    tnsnames_path: "{{ local_home }}/{{ tnsnames_file }}"
    sqlnet_path: "{{ local_home }}/{{ sqlnet_file }}"

- debug: var={{ item }}
  with_items:
    - local_home
    - profile_path
    - tnsnames_path
    - sqlnet_path

- name: Create {{ profile_path }} if it doesn't exist
  file:
    path: "{{ profile_path }}"
    state: touch
  connection: local

- name: Get status of /opt
  stat: path=/opt
  connection: local
  register: stat_opt_path

- name: Create /opt when it does not exist
  file: path=/opt state=directory
  connection: local
  become: true
  when: (stat_opt_path.stat.exists is defined and stat_opt_path.stat.exists|bool == false)

- name: Kill old oracle installation
  connection: local
  file: path={{ oracle_path }} state=absent
  become: true

- name: Create folders
  connection: local   
  file: path={{ oracle_path }} state=directory
  become: true

- name: Unarchive client files
  connection: local   
  unarchive:  src="{{ client_path }}/{{ item }}" dest="{{ oracle_path }}"
  with_items: "{{ filenames }}"
  when: arch is defined
  become: true

- name: Link base folders
  connection: local
  file:  src="{{ item.src }}" dest="{{ item.dest }}" state=link
  with_items:
    - { src: "./{{ unzip_path }}", dest: "{{ instantclient_path }}" }
    - { src: "./instantclient/sdk/include", dest: "{{ oracle_include_path }}" }
  become: true

- name: Link libraries to give versionless file
  connection: local
  file:
    src: "./{{ item }}.{{ libtype }}.{{ version_cfg.link }}"
    dest: "{{ instantclient_path }}/{{ item }}.{{ libtype }}"
    state: link
  with_items: "{{ linked_libraries }}"
  become: true

- name: Link libraries to /usr/local/lib
  connection: local
  file:
    src: "{{ instantclient_path }}/{{ item }}.{{ libtype }}"
    dest: "/usr/local/lib/{{ item }}.{{ libtype }}"
    state: link
  with_items: "{{ linked_libraries }}"

- name: Make TNS_ADMIN directory
  connection: local
  file: path={{ tns_admin_path }} state=directory
  become: true

- name: Get status of {{ tnsnames_path }}
  stat: path={{ tnsnames_path }}
  connection: local
  register: stat_tnsnames

- name: Link {{ tnsnames_path }}
  file:  src="{{ tnsnames_path }}" dest="{{ tns_admin_path }}/tnsnames.ora" state=link
  when: (stat_tnsnames.stat.exists is defined and stat_tnsnames.stat.exists|bool == false)
  connection: local
  become: true

- name: Get status of {{ sqlnet_path }}
  stat: path={{ sqlnet_path }}
  connection: local
  register: stat_sqlnet

- name: Link {{ sqlnet_path }}
  connection: local
  file:  src="{{ sqlnet_path }}" dest="{{ tns_admin_path }}/sqlnet.ora" state=link
  when: (stat_sqlnet.stat.exists is defined and stat_sqlnet.stat.exists|bool == false)
  become: true

- name: Get shell
  set_fact:
    shell_type: "{{ lookup('env','SHELL') }}"

- name: Set library file when zsh
  set_fact:
    rc_file: "{{ local_home }}/.zshrc"
  when: shell_type is defined and shell_type == "/bin/zsh"

- name: Set library file when bash
  set_fact:
    rc_file: "{{ local_home }}/.bash_profile"
  when: shell_type is defined and shell_type == "/bin/bash"

- name: Set sudoers file
  set_fact:
    sudoers_file: "/etc/sudoers"

- name: Define libraries in {{ rc_file }}
  connection: local
  blockinfile:
    dest: "{{ rc_file }}"
    block: |
      export ORACLE_HOME={{ oracle_path }}
      export OCI_HOME={{ instantclient_path }}
      export OCI_LIB_DIR={{ instantclient_path }}
      export OCI_INC_DIR={{ oracle_include_path }}
      export OCI_INCLUDE_DIR={{ oracle_include_path }}
      export TNS_ADMIN={{ tns_admin_path }}
      export {{ lib_path }}={{ instantclient_path }}
      CLASS_PATH+=:$ORACLE_HOME

      {{ lib_path }}={{ instantclient_path }}
      PATH+=:{{ instantclient_path }}
    insertafter: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK - ORACLE"
  when: rc_file is defined and shell_type != ""


- name: Define libraries in {{ profile_path }}
  connection: local
  blockinfile:
    dest: "{{ profile_path }}"
    block: |
      export ORACLE_HOME={{ oracle_path }}
      export OCI_HOME={{ instantclient_path }}
      export OCI_LIB_DIR={{ instantclient_path }}
      export OCI_INC_DIR={{ oracle_include_path }}
      export OCI_INCLUDE_DIR={{ oracle_include_path }}
      export {{ lib_path }}={{ instantclient_path }}
      export TNS_ADMIN={{ tns_admin_path }}

      CLASS_PATH+=:$ORACLE_HOME
      {{ lib_path }}={{ instantclient_path }}
      PATH+=:{{ instantclient_path }}
    insertafter: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK - ORACLE"
  when: profile_path is defined

- name: Define libraries in {{ sudoers_file }}
  connection: local
  blockinfile:
    dest: "{{ sudoers_file }}"
    block: |
      Defaults        env_keep += "ORACLE_HOME"
      Defaults        env_keep += "OCI_HOME"
      Defaults        env_keep += "OCI_LIB_DIR"
      Defaults        env_keep += "OCI_INC_DIR"
      Defaults        env_keep += "OCI_INCLUDE_DIR"
      Defaults        env_keep += "TNS_ADMIN"
      Defaults        env_keep += "CLASS_PATH"
    insertafter: "env_reset"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - ORACLE"
  become: true
